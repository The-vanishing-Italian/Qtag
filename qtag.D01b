#!/usr/bin/python3

# by Alberto Emiliani
# This code is distributed under GNU General Public Licence (GPL). See http://www.gnu.org/copyleft/gpl.html

# Version must be updated in last line of class MyDefaults

# Major changes for version C up to C05:
# main REGEXes compiled only once.
# Possibility of listing many options in single string with leading "-"
# Found and corrected a bug about case sensitive search and tag add and del with lower case tag
# Added 0-9 and "," as normal separators.
# Put ig in Defaults, so that it can be modified easily
# When renaming, if trying to rename to name of existing file, ask user whether to add standard tag, to skip renaming or to add another string of her choice
# Fixed bug in delete single tag: if tag is regex, error (of course). Rewritten delete_single_tag more efficiently: comparison with compiled regex of plain tag

# Changes from C05 to C06:
# main loop in scan_all: replaced glob.iglob loop with os.walk loop
# added notag check: if a dir contains a file called "notag", the dir and all its subdirs are cut from the tree and are not scanned

# Changes from C06 to C07:
# In workpathdir, reproduce dir tree, only for the branches that contain file matches. Made relevant changes in correct_filename, delete_single_tag, manage_tag_new,
# which now get in input whole absolute path both for target and for link.
# In append mode, file manager is called.

# From C07 to C07b
# Added total size of found files
# Fixed bug if qtag is written without arguments (printed help but "option not recognized" above it)
# Signals symlinks; if broken writes "BAD LNK"
# If bad link, doesn't try to calculate size 

# From C07b to C07c
# Extensively commented logic of filename check in normal search (not tag management -n)
# File manager only opens after write operation (-w), not after -n

# From C07c to C08
# Added option -y for tag manipulation (after -n, e.g. -ny): intermediate level between dry run and file writing; this one writes only to symlinks
# Added option -z (dry run or writing to files with -r, e.g. -zr) to transfer filenames in symdir (Defaults.workpath) to target files. Therefore,
# filenames in symdir can also be altered manually, or deleted in case the mass changes you previously made with -ny don't suit you for a few files,
# then the changes are poured into the orginal files.
# File Manager previously kept opening windows all the time, filling the desktop with active instances. Fixed.

# From C08 to C09
# Added tag replacement in -n. After -n, /OldTag/NewTag

# From C09 to D01
# Tag management now uses the same search functions as search. No more weird results from attempt to find only whole words. Big change,
# several global variables in order to use same functions
# to D01b: replaced os.system with subprocess.Popen

import sys, os, glob, re, shutil, subprocess


class Colors:
    Green, Red, White, Blue, Cyan, Grey = '\033[92m', '\033[91m', '\033[0m', '\033[94m', '\033[96m', '\033[90m'
    Bold, Italics, Normal = '\033[1m', '\x1B[3m', '\033[0m'


class MyDefaults:
	def __init__(self):
		self.alt_colors = Colors.Cyan
		self.quick = True
		self.case_sensitive = False
		self.recursive = True
		self.onlydirs = False
		self.onlyfiles = False
		self.set_qtag = False
		self.dont_simulate = False
		self.only_symlinks = False
		self.transfer_syms = False
		self.extended = True
		self.writing = 'N'
################### The following for tag management
		self.manage = False
		self.mmode = ""			# can be delete add replace
		self.new_tag = ""
		self.replace_tag = False
		self.old_tag = ""
		self.old_start = None
		self.old_end = None
		self.replacing_tag = ""
		self.mtag = ""
		self.mcompiled = []
		self.match = None
		self.separator = ''
###################################################
		self.programpath = sys.argv[0]
		self.new_argv = []
		self.negative_list = []
		self.positive_list = []
		self.userpath = './'
		self.workpath = ""
		self.ancient_workdir = False
		self.separators = '\^\$\*\+\?\{\}\[\]\\\|\(\)\.\-/_ 0123456789'
		self.ig = "[\^\$\*\+\?\{\}\[\]\\\|\(\)\.\-/_, 0-9]"
		self.version = 'qtag vers. D.01b'


def begins_uppercase(test):
    if test[0] == test[0].upper():
        return (True)
    else:
        return (False)


def init_writing() -> object:
    Defaults.workpathdir = '/0qtag_results'
    Defaults.workpath = os.environ['HOME'] + Defaults.workpathdir  # to find out files in workpath and discard them in scan
    if Defaults.writing == 'Y':
        if os.path.exists(Defaults.workpath):
            shutil.rmtree(Defaults.workpath)
        os.mkdir(Defaults.workpath)
    elif Defaults.writing == 'A':
        if not (os.path.exists(Defaults.workpath)):
            os.mkdir(Defaults.workpath)
        else:
            Defaults.ancient_workdir = True
    else:
        if os.path.exists(Defaults.workpath):
            Defaults.ancient_workdir = True


def look_for_path():
    path_str = os.environ['PATH']
    path_list = path_str.split(':')
    home_path = os.environ['HOME']
    for one_path in path_list:
        if home_path.find(one_path):
            return (one_path)
    else:
        printout_error(
            'No home path found in environ variable PATH\nChange PATH manually or copy qtag to system dir (SU privileges required)')
        sys.exit(0)


def set_qtag_command():
    found_path = look_for_path()
    try:
        if not (os.path.exists(found_path)):
            os.mkdir(found_path)
            print("Created dir", found_path)
    except:
        printout_error("Error creating " + found_path)
        return
    destpath = os.path.join(found_path, 'qtag')
    if destpath == Defaults.programpath:
        printout_error("Error: you are trying to copy " + Defaults.programpath + "\nto " + destpath)
        sys.exit(0)
    try:
        shutil.copy(Defaults.programpath, destpath)
        print()
        print("Copied file", Defaults.programpath, "to", destpath)
        print(Colors.Bold, "'qtag'", " can now be run as a command", sep="")
        print("(To check path: 'echo $PATH')")
    except:
        printout_error("Error copying file qtag to " + destpath)


def pause():
    print(Colors.Normal, 'Press ENTER to continue', Colors.Bold, sep="")
    sys.stdin.read(1)


def print_help():
    print(Colors.Bold, '******* qtag       A search tool for ', Colors.Red, 'HUMANS', Colors.Normal, Colors.Bold,
          ' -- by Alberto Emiliani       *******', sep='')
    print('Computers contrive such file names as "0TR6fE0dr5TW", but humans use',Colors.Blue,' words.',Colors.Normal,Colors.Bold, sep='')
    print('The goal of qtag is to make search handy for file names written by humans.')
    print('TAGS are ',Colors.Blue,'words or word-beginnings,',Colors.Normal,Colors.Bold,' in any order. Syntax: ',Colors.Italics,Colors.Blue,'qtag [Tags and Options]',Colors.Normal,Colors.Bold, sep='')
    print('"qtag ari" matches "Aristotle", "my Arist", even "MyFriendArist"; NOT "parish".')
    print('Leading colon means ',Colors.Blue,'not',Colors.White,Colors.Bold,'. "qtag repo :pdf" finds "Report.doc", not "Report.pdf"',sep='')
    print('Any number of tags can be combined for an ',Colors.Blue,'and',Colors.White,Colors.Bold,' search that matches all of them.',sep='')
    print('WILDCARDS: ',Colors.Blue,'dot (".")',Colors.White,Colors.Bold,' stands for any single char; ',Colors.Blue,'".*"',Colors.White,Colors.Bold,' for any sequence of chars.',sep='')
    print('OPTIONS:specify them where you like. "-p","-n" REQUIRE argument. -h prints this.')
    print(Colors.Green, '-p', Colors.Normal, Colors.Bold,
          '      search path. MUST be followed by (space and) userpath. Def.: current dir', sep="")
    print(Colors.Green, '-w', Colors.Normal, Colors.Bold,
          '      write links to matching files to working dir, open it in file manager', sep="")
    print(Colors.Green, '-a', Colors.Normal, Colors.Bold,
          '      write links to working dir but append (add) them to existing links', sep='')
    print(Colors.Green, '-c', Colors.Normal, Colors.Bold, '      case sensitive search', sep='')
    print(Colors.Green, '-d', Colors.Normal, Colors.Bold, '      search only for dirs ', Colors.Green, '-f',
          Colors.Normal, Colors.Bold, ' only for files ', sep='', end='')
    print(Colors.Green, '-l', Colors.Normal, Colors.Bold, ' local search (no recursion)', sep='')
    print(Colors.Green, '-s', Colors.Normal, Colors.Bold,
          '      simple search -- no such embodied tags as: "for" in "LookForMe"', sep='')
    print(Colors.Green, '-x', Colors.Normal, Colors.Bold,
          '      write qtag to .local/bin for quick calling - if .local/bin is in PATH', sep='')
    print('OPTIONS for TAG MANAGEMENT:', Colors.Green, "-n", Colors.Normal, Colors.Bold, ' [+ -r,-y,-c,-s] and ', Colors.Green, '-z',
	  Colors.Normal,Colors.Bold,' work on names in workdir',sep='')
    print(Colors.Green, '-n tag', Colors.Normal, Colors.Bold, '  adds tag  ',
          Colors.Green, '-n :tag', Colors.Normal, Colors.Bold, '  deletes tag  ',
	  Colors.Green, '-n /oldtag/newtag',Colors.Normal,Colors.Bold,' replaces ("tag" ok)',sep='')
    print(Colors.Green, '-c,-s', Colors.Normal, Colors.Bold,
          ' work with -n to check if tag is already there; ', sep='')
    print(Colors.Green,'-y|-r',Colors.Normal,Colors.Bold,' write to workdir|disk (without them, dry run)',sep='')
    print(Colors.Green, '-z',Colors.Normal,Colors.Bold,' writes to disk all changes made in workdir names (dry run, use -r to write)', sep='')
    print('To find all the files in selected dir, <qtag ".*">')
    print('*******  ', Defaults.version, '   More help and examples in "qtag.info.txt".    ******', Colors.Normal,
          sep="")


def printout_error(message):
    a = '**********************************************************'
    print(Colors.Red, a, sep="")
    print(message)
    print(a, Colors.Normal)


def try_compile(tag, ig):  # called by cond_check: returns compiled regex
    try:
        regex = "^(" + tag + ")|" + ig + tag
        p = re.compile(regex)  # both test_string and testfilename are original, that is, this is a case sensitive check
    except:
        tag = re.escape(tag)
        printout_error('WARNING: invalid REGEX. Reinterpreting symbols as escaped: ' + tag)
        regex = "^(" + tag + ")|" + ig + tag
        p = re.compile(regex)
    return ([p, tag])

# LOGICAL KERNEL
# The following is the logical kernel of the program. No real probs if searched tag is preceded by space or other chars. REAL prob if
# we search also for tags only marked by initial capital within an alphanumeric sequence ("extended search": "Ari" in "EfgTYbvArIcdv") in case-insensitive search.
# If the whole filename and tag are set to lowercase the word disappears in extended search. If they are not, "Ari" doesn't match "ArI" and search is not
# case-insensitive any more. The solution is a bit complex, also because it intersects with searches for presence AND absence of tags (:Ari).
# I have provided extensive comments to the program logic. To follow the comments, best to begin with check_filename, called in scan_all

def compile_regexes():  # ONLY for leading tag in word or whole word
    x = 0
    #    ig="[\.\ \-/_,0-9]" # ig means "inner group", groups for testing begin and end word in regex
    igext = Defaults.ig[:-1] + "a-z]"  # INNER GROUPS FOR REGEX FOR CASE_SENS AND FOR EXTENDED: ig extended search  IMPORTANT: add 0-9 if taken away from Defaults.ig
    def append_compiled_regex(tag, positive):
        if not Defaults.case_sensitive and Defaults.extended:		# IF case insens. and extended
            tag = tag[0].upper() + tag[1:].lower()  			# normalize tags to lowercase starting with uppercase to find extended tags
        if Defaults.case_sensitive and not begins_uppercase(tag):	# IF case sens. and NOT begins with uppercase
                							# we don't want to match ending parts of words
            compiled_case_sens = try_compile(tag, Defaults.ig)		# therefore, we only search for tag preceded by separators (Deafults.ig)
        else:								# "else" catches: 	case-sens beginning uppercase;
									#			case-ins and extended (with normalized tags, i.e. beg, with uppercase);
									#			case-ins and not extended (not )
            compiled_case_sens = try_compile(tag, igext)  		# igext adds [a-z] to ig; if case sens or case-ins. it begins uppercase
        tag = compiled_case_sens[1]	# This is the tag as it has become, whether normalized or not
        p1 = compiled_case_sens[0]	# and this the compiled regex
        tag = tag.lower()		# Up to now, in case-ins. mode, we only searched for uppercase initial letter; set all to lower 
        p2 = try_compile(tag, Defaults.ig)[0]
        if positive:			# if tag didn't begin with ":" add the couple of regexes to positive list: the first for comparison with initial
					# uppercase, the second for comparison with initial lowercase
            Defaults.positive_list.append([p1, p2])	# the lists get filled with regexes for comparisons with all tags input as arguments
        else:				# otherwise add them to the negative list
            Defaults.negative_list.append([p1, p2])

    while x < (len(Defaults.new_argv)):
        tag = Defaults.new_argv[x]
        if tag[0] == ':':			#If it's a negative tag, drop the leading ":"
            tag = tag[1:]
            append_compiled_regex(tag, False)	# and append tag and compiled regex to list of tags that must not be there
        else:
            append_compiled_regex(tag, True)	# otherwise append it to list of tags that must be there
        x += 1


def get_next_arg(argv_index, option):
    if argv_index >= len(sys.argv):
        printout_error("Argument missing after option -" + option)
        sys.exit()
    else:
        return (sys.argv[argv_index])


def set_option(option, argv_index):
    if option == 'c':
        Defaults.case_sensitive = True
    elif option == 'l':  # local
        Defaults.recursive = False
    elif option == 'w':  # write new
        Defaults.writing = 'Y'
    elif option == 'a':  # write append
        Defaults.writing = 'A'
    elif option == 'd':  # dirs only
        Defaults.onlydirs = True
    elif option == 's':  # search only for not embodied tags -- no 'for' in 'CallForHelp'
        Defaults.extended = False
    elif option == 'r':  # really write (for -n)
        Defaults.dont_simulate = True
    elif option == 'y':  # really write (for -n) but only to symlinks
        Defaults.only_symlinks = True
    elif option == 'z':  # transfer filenames of symlinks in workdir to orig. files; ignore everything else
        Defaults.transfer_syms = True
    elif option == 'f':  # only files
        Defaults.onlyfiles = True
    elif option == 'x':  # write qtag to local/bin
        Defaults.set_qtag = True
    elif option == 'h':  # help
        print_help()
        sys.exit()
    elif option == 'v':  # verbose: matches also if dir matches but not filename
        Defaults.quick = False
    elif option == 'p':  # set search path
        argv_index += 1
        Defaults.userpath = get_next_arg(argv_index, 'p')
        if Defaults.userpath[-1] != '/':
            Defaults.userpath += '/'
        if (Defaults.userpath[0] != '/') and (Defaults.userpath[0] != '.'):  # if relative but not beginning with './'
            Defaults.userpath = './' + Defaults.userpath
        if not (os.path.exists(Defaults.userpath)):
            printout_error('User path "' + Defaults.userpath + '" does not exist, setting it to current directory')
            Defaults.userpath = "./"
    elif option == 'n':  # manage tags
        Defaults.manage=True
        argv_index += 1
        try:
            Defaults.new_tag = get_next_arg(argv_index, 'n')
        except:
            printout_error("Argument missing after '-n'")
            sys.exit(0)
    else:
        printout_error('Unrecognized option: ' + option)
    return (argv_index)  # return index to loop in get_options; +=1 normally but +=2 for 'p' and 'n', which require argument


def get_options(options_string, argv_index):
    counter = 0
    while counter < len(options_string):
        option = options_string[counter]
        argv_index = set_option(option, argv_index)
        counter += 1
    return (argv_index + 1)  # for while loop in get_arguments -- options p and n have already incremented argv_index in set_option



def verify_replace_tag():
	# comes with: Defaults.replace_tag = True, Defaults.new_tag = complete string after -n
	# sets Defaults.old_tag and Defaults.replacing_tag
	str1=re.search('\/',Defaults.new_tag)
	str2=re.search('\/',Defaults.new_tag[1:])
	if (str1 == None) or (str2 == None):
		return(False)				# returns to main, which exits with error message
	first_pos=str1.start()
	second_pos=str2.start()+1
	Defaults.old_tag=Defaults.new_tag[first_pos+1:second_pos]
	if(len(Defaults.new_tag) == second_pos):		# if Defaults.new_tag ends with "/"
		return(False)				# returns to main, which exits with error message
	Defaults.replacing_tag=Defaults.new_tag[second_pos+1:]
	return(True)

	


def get_arguments():
	argCounter = 0
	if (len(sys.argv)) == 1:
		print_help()
		sys.exit()
	x = 1  # 0 has already gone into self.programpath
	if ((len(sys.argv)) > 1):
		while x < (len(sys.argv)):
			if sys.argv[x][0] == '-':
				if len(sys.argv[x]) < 2:
					printout_error("'-' not followed by option")
					sys.exit()
				x = get_options(sys.argv[x][1:].lower(), x)
			else:
				Defaults.new_argv.insert(argCounter, sys.argv[x])
				argCounter += 1
				x += 1
		if Defaults.new_tag != "":
			Defaults.manage=True
			Defaults.new_argv = []
			if Defaults.new_tag[0] == '/':
				Defaults.mmode='replace'
				Defaults.replace_tag = True
				if (verify_replace_tag()):	# this also sets Defaults.replacing_tag and Defaults.old_tag
					Defaults.new_argv.insert(1,Defaults.old_tag)
# The purpose of inserting this is to have it compiled for search; it would make no sense to search for the new (replacing) tag
# This is already in a global variable Defaults.replacing_tag and will be used to change the file name
# So, why the Defaults.old_tag WITHOUT a leading colon? In management (-n) we only have to check that tag is there: to add it if it isn't and to del it if it is 
				else:
					print(Colors.Red,Colors.Bold,'Replace tag syntax incorrect: should be /Tag1/Tag2',sep='')
					sys.ext(0)
			elif Defaults.new_tag[0] == ':':
				Defaults.mmode='delete'
				Defaults.new_argv.insert(1,Defaults.new_tag[1:])
			else:
				Defaults.mmode='add'
				Defaults.new_argv.insert(1,Defaults.new_tag)
			Defaults.mtag=Defaults.new_argv[0]
# Now, in case of option -n, there is only one tag to compile
		compile_regexes()  # once you have all the options set and the tags in Defaults.new_argv, compile regexes and put them into their lists
# In case of option -n, we have a couple of compiled regexes in Defaults.positive_list (and the negative empty): the tag to add or to delete or to replace
		if Defaults.manage:
			Defaults.mcompiled=Defaults.positive_list[0]

########################################################################################################################
#   #   #   #   #   #   #   #   #   #   #   #   #   #   END OF INITIALIZATION --- BEGINS NORMAL SEARCH 


def output_filename(fname):		# The first part deals with the printing to scr, the second with creating symlinks to matching files in workpathdir
	if Defaults.alt_colors == Colors.White:
		Defaults.alt_colors = Colors.Cyan
	else:
		Defaults.alt_colors = Colors.White
	print(Defaults.alt_colors,sep ="",end="")
	if os.path.isdir(fname):		# If fname is a dir, we just print "DIR" in bold type
		print(Colors.Bold, 'DIR:', Colors.Normal, Defaults.alt_colors,sep="", end="")
	if os.path.islink(fname):
		if not os.path.exists(os.readlink(fname)):
			print(Colors.Bold, Colors.Red,'BAD LNK:', Colors.Normal, Defaults.alt_colors,sep="", end="")
		else:
			print(Colors.Bold, 'LNK:', Colors.Normal, Defaults.alt_colors,sep="", end="")
	if fname[0:2] == './':
		print(fname[2:])
	else:
		print(fname)
	if Defaults.writing == 'N':		# If we don't have to create any symlinks, return
		return
	if (Defaults.userpath[0] == '/'):  # if absolute path in userpath; (userpath is at least "./", so no error here)
		targetname = os.path.abspath(fname)
	else:
		if fname[0:2] == './':  # if filename begins with ./ strip it off
			fname = fname[
					2:]  # no error should be possible here, because function output_filename is only entered with fname != ""
		targetname = os.path.abspath(fname)	#check this: from version C06 every fname should come with absolute path
# In version C7, we re-create dir tree
	# First, let's try to shorten the tree to the current dir:
	shortname=os.path.relpath(targetname,Defaults.userpath)
	if os.path.isdir (shortname):
		if not os.path.exists(os.path.join(Defaults.workpath,shortname)):
			os.makedirs(os.path.join(Defaults.workpath,shortname))
	else:
		head,tail = os.path.split(shortname)
		newdir = os.path.join(Defaults.workpath,head)
		if not os.path.exists(newdir):		
			os.makedirs(newdir)
		link=os.path.join(newdir,tail)
		if not os.path.exists(link):
			os.symlink(targetname,link)



def cond_match(compiled, testfilename, orig_filename, negative):
    # negative is Boolean: true if the test is successful for negative result (that is, if the tag had a trailing ":")
    # called by cond_check: returns ['m',_] if matches
    # ['n',_] if it does not; [_,""] if cond is not satsf. (match if negative and not match if pos.)
    # [_,filename] if cond is satisf. (match if pos and not match if neg.)
    # 'm' 'n' are needed by cond_check to decide whether to go on if search case_ins. AND extended;
    # in this case, if there is a match the test is complete (ok if pos and failed if neg)
    # otherwise we must go on to test lowercase tag and lowercase filename
    # at any rate, in case of success we return the original file name (not the lowercase one)
    m = compiled.search(testfilename)	# This is the actual comparison between testfilename and compiled regex; result True or False
    if m:  # if it matches (m) it returns, both if case-sens and if not case-sens but uppercase-first
        Defaults.match=m
        if negative:  			# the point of this complex structure is that we want to
            return ['m', ""]  		# recognize things as "erTag..." "09080Tag..." even for case insensitive search
        else:
            return ['m', orig_filename]
    else:			# If it doesn't match
        if not (negative):	# ... but it SHOULD ((if it is NOT c-sens. then the program gets here only if the tag is uppercase-first but it doesn't match))
            return ['n',""]	# return that it didn't match and this is a failure
				# ((therefore, in this case, the not matching is not a success if negative and not a failure if not negative))
        else:			# ... and it SHOULD NOT match
				# ((It is such a success or failure only in case the search was case_sens. -- upper-first or not.))
            return ['n', orig_filename]		# return that it didn't match and this is a success


def cond_check(filename, compiled_regex,negative):  # called by check_filename: returns filename if match or "". Calls cond_match.
	# compiled_regex is a list of couples: (1) regex for extended and case sens search; (2) regex for case ins and not ext. (lowercase) search
	# This is a bit tricky. The first regex: compiled_regex[0] in the couple, is looking for, say, "Ari" in case-ins+extended AND ALSO for all the
	# case-sens possibilities; see above, compile_regexes. Therefore, case-ins. and extended search can still succeed even if the check with compiled_regex[0]
	# fails, because it is presently searching for "Ari". It finds "Ari" in "dedededeAriiiiii" and in "dede_Ari_mmmm" but doesn't find "ari" in
	# "dede_arinnnn" or "dede_ari_bbb" -- it MUST NOT find it in "dedeari".
	# If search for "Ari" is enough to give a match, we return, otherwise we go on with a lowercase search.
	# Case-sens search is instead completed by this first run; if tag starts with lowercase, compiled_regex[0] doesn't include alphabetic chars as separators
	# (see above, compile_regexes) and it finds all of "dede_aRIblg" or "dede_aRi" etc. If it begins with uppercase, alphabetic chars are separators
	# in compiled_regex[0] and search is ok.
    if Defaults.case_sensitive or Defaults.extended:
        result = cond_match(compiled_regex[0], filename, filename, negative) 	# we send two filenames because we are sending the first one in lowercase below
										# but the original must be returned if check ok
        if Defaults.case_sensitive or result[0] == 'm':  # if case-sens., ok, test ended, if case-ins.
            return result[1]		# the test is good only if it matched -- be it a success or a failure, it is a definitive success or failure,
					# because the tag may still match (remember: for case-ins. extended the first letter was turned uppercase, it may
					# match in lowercase)
					# And so, since the only remaining possibility of matching is for non-alphabetic separators, turn filename lowercase:
					# In lowercase, all and only matches are by non-alpha separators
    l_filename = filename.lower()	# first we lowercase the filename
    result = cond_match(compiled_regex[1], l_filename, filename, negative)	# then we apply compiled_regex[1], where the regex was compiled
										# for a tag entirely turned to lowercase (see just before p2 assignment in
										# append_compiled_regex
    return result[1]  # it came to this point only if it didn't match before. If it reached here, the present result is the good one


def check_filename(filename):  # called by scan_all. Loops through compiled regexes, calls cond_check. Returns filename if it matches or "" else
	# scan_all sends all filenames here (only dirs or only files if releveant options are set) to check if they fit the regexes in the positive and
	# in the negative list
    for compiled_regex in Defaults.positive_list:
        filename = (cond_check(filename, compiled_regex, False))	# cond_check_filename makes the comparison, regex by regex; False means that
									# it is false that the comparison is successful if negative result (a bit roundabout)
        if filename == "":						# Each compiled_regex (pos or neg) is a couple of regexes, for case sens and ins check
            return ""
    for compiled_regex in Defaults.negative_list:
        filename = (cond_check(filename, compiled_regex, True))
        if filename == "":
            return ""
    return filename


def scan_all():  # called by normal search, not by add or delete tags (-n). Loops through filenames. Calls check_filename.
		 # If file matches, prints it and updates counter
	total_number = 0
	total_size = 0	# for size of matching files
	match_number = 0  # counter, only for printing number of matching files
	for root,dirs,files in os.walk(Defaults.userpath):
		if Defaults.workpathdir in root:  # in case you are writing or have written to workpath, don't scan workpath too
			continue
		if os.path.isfile(os.path.join(root,"notag")):
			del dirs[:]
			continue
		if not Defaults.onlyfiles:
			for testFilename in dirs:
				total_number += 1
				backname = (check_filename(testFilename))  # ********** crucial line: check the filename, returns filename if check passed or '' else
				if backname != "":
					output_filename(os.path.join(root,testFilename))
					match_number += 1
					total_size += os.path.getsize (os.path.join(root,testFilename))		
		if not Defaults.onlydirs:
			for testFilename in files:
				total_number += 1
				if Defaults.quick:  # if quick flag is set, only check the basename
					shortFilename = os.path.basename(testFilename)
				backname = (check_filename(shortFilename)) 
				# ********** the above is the crucial line: check the filename, returns filename if check passed or '' else
				if backname != "":
					good_name=os.path.join(root,shortFilename)
					output_filename(good_name)
					match_number += 1
					if os.path.islink(good_name):
						if os.path.exists(os.readlink(good_name)):
							total_size += (os.path.getsize(good_name))
					else:
						total_size += (os.path.getsize(good_name))
		if not Defaults.recursive:
			break
	print()
	print(Colors.White,Colors.Bold,match_number, " found for ",round(total_size/1048576,2),"MB    ", total_number," parsed,         'qtag -h' for some help",sep="")

#########################################################################################################################################
#   #   #   #   #   #   #   #   #   #   #   #   #   #   #   END OF NORMAL SEARCH: BEGINNING OF TAG MANAGEMENT --- -n

# Three levels. 1 Dry run (default). 2 -y: affect only symlinks. 3 -r: affect targets. 

def check_newname(new):
	while os.path.exists(new) or os.path.basename(new) == "":
		insert = 'qtag_auto_'
		print(Colors.Bold,Colors.Red, "WARNING: File already existing or empty name:\n", new, sep='')
		head, tail = os.path.split(new)
		new = os.path.join(head, insert + tail)
		print(Colors.Normal,Colors.Red,'Trying to change name to', new, Colors.Normal, sep='')
		answer = input('Is this change ok? (y accepts, n leaves unchanged, other is added to file name as leading string) ')
		if answer.lower() == 'n':
			return("")
		else:
			if answer.lower() != 'y':
				insert = answer+Defaults.separator
		new = os.path.join(head, insert + tail)
	return(new)

def correct_filename(target_whole_name, new_base,linkname):
    # called by delete_single_tag: deletes tag from filename pointed by symlink
    # old=target whole name, new_base=new target name. Also updates symlink.
	head, tail = os.path.split(target_whole_name)
	new = os.path.join(head, new_base)
#	print("|||new",new)
	print(Colors.Bold, "renaming", Colors.Normal, target_whole_name, sep="")
	print(Colors.Bold, '      to', Colors.Normal, new, sep="")
	files_changed=0
	if Defaults.dont_simulate:	# that is, if option -r is on
		new=check_newname(new)
		if new == "":
			return(0)
		try:
			os.rename(target_whole_name, new)
			files_changed=1
		except Exception as e:
			print("**********",e,"||",new)
			printout_error("Cannot rename file")
			files_changed=0
		try:
			os.remove(linkname)
		except Exception as e:
			print("**********",e)
			printout_error("Unable to remove symlink " + linkname)
		Defaults.writing = 'A'  # to have output_filename write to disk
		output_filename(new)  # update symlink
	else:
		print(Colors.Bold,Colors.Blue,'     Renaming only simulated: -r to execute',Colors.Normal,sep='')
		files_changed=1
	if Defaults.only_symlinks:
		new=check_newname(new)
		if new == "":
			return(0)
		try:
			os.rename(target_whole_name, new)
			files_changed=1
		except Exception as e:
			print("**********",e,"||",new)
			printout_error("Cannot rename file")
			files_changed=0
	return(files_changed)


def remove_escapes(str):  # to remove escape chars from string
    new = ''
    for i in range(len(str)):
        if str[i] == '\\':
            if i < len(str) and str[i + 1] == '\\':
                i += 1
                new += '\\'
        else:
            new += str[i]
    return (new)


def delete_single_tag(match, testfilename, filename, tag,linkname):
# called by loop_links_to_target and loop_just_links, called by manage_new_tag. testfilename=basename of target; filename=whole name of target with abs path
# linkname=whole name of link with abs path
    index_start=match.start()
    index_end=match.end()
    if index_start > 0:
        index_start=index_start+1
    if Defaults.replace_tag:
        new_basefilename = testfilename[:index_start] + Defaults.replacing_tag + testfilename[index_end:]
    else:	# that is, if the action is just to delete the tag
        new_basefilename = testfilename[:index_start] + testfilename[index_end:]
    count=correct_filename(filename, new_basefilename, linkname)
    return(count)


def loop_links_to_targets(tag,action):
	counter=0
	for root, dirs, linknames in os.walk(Defaults.workpath):	# new loop version from C07, recurs through dirs in workpath
		for linkname in linknames:
			link_whole_name=os.path.join(root,linkname)
			target_whole_filename = os.path.realpath(link_whole_name)
			target_basename = os.path.basename(target_whole_filename) # Just test the bare filename, not the path
			matching_filename = cond_check(target_basename, Defaults.mcompiled,False)  # we need to know if tag is there
			# if we have to add: if matching_filename != "" tag it is already there and nothing must be done
			# if we have to del or repl.: since it's already there (result=True), it must be taken away; if repl. delete_single_tag also replaces
			if matching_filename != "":
				if (action == 'delete') or (action == 'replace'):  # you del the tag since it's there, because result ok
					files_changed=delete_single_tag(Defaults.match, target_basename, target_whole_filename, tag, link_whole_name)
					counter += files_changed
					continue
			else:	# that is, if tag is not found in filename
			# if it has to add, add it
				if action == 'add':  # result == none: and so you add the tag since it isn't there
					head, tail = os.path.split(target_whole_filename)
					new_base = tag + Defaults.separator + tail
	# new tag is added at the beginning of file name, followed by underscore
					files_changed=correct_filename(target_whole_filename, new_base, link_whole_name)
					counter += files_changed
	return(counter)

def loop_just_links(tag,action):
	counter=0
	for root, dirs, linknames in os.walk(Defaults.workpath):	# new loop version from C07, recurs through dirs in workpath
		for linkname in linknames:
			link_whole_name=os.path.join(root,linkname)
#			target_whole_filename = os.path.realpath(link_whole_name)
			link_basename = os.path.basename(link_whole_name) # Just test the bare filename, not the path
			matching_filename = cond_check(link_basename, Defaults.mcompiled,False)  # we need to know if tag is there
			if matching_filename != "":
				if (action == 'delete') or (action == 'replace'):  # you del the tag since it's there, because result ok
					files_changed=delete_single_tag(Defaults.match, link_basename, link_whole_name, tag, link_whole_name)
					counter += files_changed
					continue
			else:
				if action == 'add':  # matching_filename == ""; and so you add the tag since it isn't there
					head, tail = os.path.split(link_whole_name)
					new_base = tag + '_' + tail
	# new tag is added at the beginning of file name, followed by underscore
					files_changed=correct_filename(link_whole_name, new_base, link_whole_name)
					counter += files_changed
	return(counter)




def manage_new_tag():  # called by normal search, not by add or delete tags (-n). Loops through filenames. Calls check_filename.
	if Defaults.only_symlinks:
		counter=loop_just_links(Defaults.mtag,Defaults.mmode)
	else:
		counter=loop_links_to_targets(Defaults.mtag,Defaults.mmode)
	if Defaults.mmode == 'add':
		print('\nAdded tag "', Defaults.mtag, '" to ', end="",sep="")
	elif Defaults.mmode == 'delete':
		print('\nDeleted tag "', Defaults.mtag, '" in ', end="",sep="")
	elif Defaults.mmode == 'replace':
		print('\nReplaced tag "', Defaults.mtag,'" with "',Defaults.replacing_tag, '" in ', end="",sep="")
	print(counter, ' file(s)')

	return(counter)


#########################################################################################################################################################
#	#	#	#	#	#	#	#	#	TRANSFER SYMNAMES -z[r]	#	#	#	#	#	#	#	#

# Implements -z option. Description: transfers symnames in Workdir (either modified by -ny commands or by hand) to original files.
# -z obliterates all other searches and options, except -r: -z dry run, -zr writes to files.

def loop_on_workpath():
	counter_parsed=0
	counter_changed=0
	for root, dirs, linknames in os.walk(Defaults.workpath):	# new loop version from C07, recurs through dirs in workpath
		for linkname in linknames:
			counter_parsed +=1
			link_whole_name=os.path.join(root,linkname)
			target_whole_filename = os.path.realpath(link_whole_name)
			print(Colors.Bold,'_____________________________________________________',Colors.Normal,sep='')
			ln_head,ln_tail = os.path.split(link_whole_name)
			print ('Symlink name =',ln_tail)
			tg_head,tg_tail = os.path.split(target_whole_filename)
			print ('Target name  =',tg_tail)
			if ln_tail == tg_tail:
				print('     ',Colors.Bold,'No change, no action',Colors.Normal,sep='')
			else:
				counter_changed += (correct_filename(target_whole_filename, ln_tail, link_whole_name))
	print (Colors.Bold,Colors.Blue,'Parsed: ',counter_parsed,'           Changed: ',counter_changed,Colors.Normal,sep='')


def transfer_symnames():
	# This may be called with Defaults.dontsimulate on or off. It may mistakenly be called with Defaults.only_symlinks on (-y), which would try
	#	to change symlinks names (in workpath) into themselves. Therefore, turn option to False in case user mistakenly turned it to True
	Defaults.only_symlinks=False
	# Then, check that workdir exists
	if not(os.path.exists(Defaults.workpath)):
		print(Colors.Bold,"No symdir ",Colors.Red,Defaults.workpath,Colors.Normal,Colors.Bold,sep='')
		print("exiting",Colors.Normal)
		return
	else:
	# If it exists, loop and check whether linknames=target names, make changes either virtually (dry run) or effectively (-r)
		loop_on_workpath()



######################################################################## MAIN ##################################################################

Defaults = MyDefaults() # a rough use of classes...
get_arguments()
init_writing()
print()
print("*******", Defaults.programpath, "*******")
print()
if Defaults.set_qtag:			# priorities: if -x is an option, it overrides and obliterates all the others
	set_qtag_command()
	sys.exit(0)
if Defaults.transfer_syms:		# then -z
	transfer_symnames()
	sys.exit(0)
if Defaults.manage:			# then -n
	manage_new_tag()
else:
	scan_all()
if Defaults.writing == 'Y':
	subprocess.Popen("xdg-open " + Defaults.workpath, shell=True).wait()
print(Defaults.version)
